<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:cxf="http://cxf.apache.org/core" xmlns:mybatis="http://mybatis.org/schema/mybatis-spring" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
            http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
            http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

	<!-- scan for mappers -->
	<mybatis:scan base-package="com.test.user.mapper" />

	<!-- enable component scanning and autowire (beware that this does not enable mapper scanning!) -->
	<context:component-scan base-package="com.test.user.service" />

	<!-- enable transaction demarcation with annotations -->
	<tx:annotation-driven />

	<!-- a database and a datasource -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.h2.Driver" />
		<property name="url" value="jdbc:h2:~/serviceC" />
	</bean>

	<jdbc:initialize-database data-source="dataSource">
		<jdbc:script location="classpath:database/schema.sql" />
		<jdbc:script location="classpath:database/data.sql" />
	</jdbc:initialize-database>

	<bean id="jbossTransactionManager" class="com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionManagerImple" />
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager">
			<ref bean="jbossTransactionManager" />
		</property>
	</bean>

	<!-- define the SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.test.user.domain" />
	</bean>

	<!-- needed to explicitly kick off the ws-at transactional subsystem since we are running outside j2ee container -->
	<bean id="txnService" class="org.jboss.jbossts.XTSService" init-method="start" />

	<!-- Enabling Interceptors -->
	<bean id="logInbound" class="org.apache.cxf.interceptor.LoggingInInterceptor" />
	<bean id="logOutbound" class="org.apache.cxf.interceptor.LoggingOutInterceptor" />

	<!-- Enabling message logging using custom CXF bean elements -->
<!-- 	<cxf:bus>
		<cxf:inInterceptors>
			<ref bean="logInbound" />
		</cxf:inInterceptors>
		<cxf:outInterceptors>
			<ref bean="logOutbound" />
		</cxf:outInterceptors>
		<cxf:outFaultInterceptors>
			<ref bean="logOutbound" />
		</cxf:outFaultInterceptors>
		<cxf:inFaultInterceptors>
			<ref bean="logInbound" />
		</cxf:inFaultInterceptors>
	</cxf:bus> -->

	<!-- ws-at participant service (for web services) -->
	<jaxws:endpoint id="wsatParticipantService" implementor="com.arjuna.webservices11.wsat.sei.ParticipantPortTypeImpl" address="/ParticipantService" />

	<!-- ws-at coordination services -->
	<jaxws:endpoint id="wsatCompCoordService" implementor="com.arjuna.webservices11.wsat.sei.CompletionCoordinatorPortTypeImpl" address="/CompletionCoordinatorService" />
	<jaxws:endpoint id="wsatCoordService" implementor="com.arjuna.webservices11.wsat.sei.CoordinatorPortTypeImpl" address="/CoordinatorService" />
	<jaxws:endpoint id="wsatActivationService" implementor="com.arjuna.webservices11.wscoor.sei.ActivationPortTypeImpl" address="/ActivationService" />
	<jaxws:endpoint id="wsatRegistrationService" implementor="com.arjuna.webservices11.wscoor.sei.RegistrationPortTypeImpl" address="/RegistrationService" />

	<!-- ws-at client services (i think we could use the RPC service and avoid exposing this endpoint) -->
	<jaxws:endpoint id="wsatCompletionInitService" implementor="com.arjuna.webservices11.wsat.sei.CompletionInitiatorPortTypeImpl" address="/CompletionInitiatorService" />
	<jaxws:endpoint id="wsatCompletionCoordRPCService" implementor="com.arjuna.webservices11.wsat.sei.CompletionCoordinatorRPCPortTypeImpl" address="/CompletionCoordinatorRPCService" />

	<!-- JAX-WS Service Endpoint -->
	<jaxws:endpoint id="user" implementor="com.test.user.service.UserServiceImpl" address="/user">
		<jaxws:properties>
			<entry key="faultStackTraceEnabled" value="true" />
			<entry key="exceptionMessageCauseEnabled" value="true" />
		</jaxws:properties>
	</jaxws:endpoint>

	<!-- JAX-WS Service Endpoint -->
	<jaxws:endpoint id="inboundUser" implementor="com.test.user.service.UserServiceImpl" address="/inboundUser">
		<jaxws:properties>
			<entry key="faultStackTraceEnabled" value="true" />
			<entry key="exceptionMessageCauseEnabled" value="true" />
		</jaxws:properties>
		<jaxws:handlers>
			<bean class="org.jboss.jbossts.txbridge.inbound.JaxWSTxInboundBridgeHandler" />
			<bean class="com.arjuna.mw.wst11.client.JaxWSHeaderContextProcessor" />
		</jaxws:handlers>
	</jaxws:endpoint>

	<jaxws:client id="outboundUser" address="http://localhost:8084/ws/inboundUser" serviceClass="com.test.user.service.UserService">
		<jaxws:properties>
			<entry key="faultStackTraceEnabled" value="true" />
			<entry key="exceptionMessageCauseEnabled" value="true" />
		</jaxws:properties>
		<jaxws:handlers>
			<bean class="org.jboss.jbossts.txbridge.outbound.JaxWSTxOutboundBridgeHandler" />
			<bean class="com.arjuna.mw.wst11.client.JaxWSHeaderContextProcessor" />
		</jaxws:handlers>
	</jaxws:client>

</beans>